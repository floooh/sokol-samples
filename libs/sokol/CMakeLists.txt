# special case Linux: EGL window system glue with desktop GL 3D backend
if (SOKOL_USE_EGL_GL)
    add_definitions(-DSOKOL_FORCE_EGL)
endif()

# a dummy library with the system library dependencies
macro(sokol_system_deps)
    if(SOKOL_USE_WGPU_DAWN)
        fips_libs(webgpu_dawn)
    endif()
    if (FIPS_OSX)
        fips_frameworks_osx(Foundation)
        if (FIPS_IOS)
            fips_frameworks_osx(UIKit AudioToolbox AVFoundation)
            if (SOKOL_USE_METAL)
                fips_frameworks_osx(Metal MetalKit)
            else()
                fips_frameworks_osx(OpenGLES GLKit)
            endif()
        else()
            fips_frameworks_osx(Cocoa QuartzCore AudioToolbox)
            if (SOKOL_USE_METAL)
                fips_frameworks_osx(Metal MetalKit)
                fips_frameworks_osx(OpenGL)
            endif()
        endif()
    else()
        if (FIPS_ANDROID)
            fips_libs(GLESv3 EGL log android)
            fips_libs(aaudio)
        elseif (FIPS_LINUX)
            if (SOKOL_USE_EGL_GLES3)
                # NOTE GLESv2 is not a typo
                fips_libs(X11 Xi Xcursor EGL GLESv2 m dl asound)
            elseif (SOKOL_USE_EGL_GL)
                fips_libs(X11 Xi Xcursor EGL GL m dl asound)
            else()
                fips_libs(X11 Xi Xcursor GL m dl asound)
            endif()
        endif()
    endif()
endmacro()

# the general sokol implementations library (compiled as C, C++ or ObjC depending on platform)
fips_begin_lib(sokol)
    if (FIPS_OSX)
        fips_files(sokol.m)
    else()
        fips_files(sokol.c)
    endif()
    sokol_system_deps()
    if (FIPS_MSVC)
        target_compile_options(sokol PRIVATE /W4)
    endif()
fips_end_lib()

# the sokol implementations library (compiled as C++)
fips_begin_lib(sokol-cpp)
    if (FIPS_OSX)
        fips_files(sokol.mm)
    else()
        fips_files(sokol.cc)
    endif()
    sokol_system_deps()
    if (FIPS_MSVC)
        target_compile_options(sokol-cpp PRIVATE /W4)
    endif()
fips_end_lib()

# the sokol implementations library with SOKOL_NO_ENTRY support
if (NOT FIPS_ANDROID)
fips_begin_lib(sokol-noentry)
    if (FIPS_OSX)
        fips_files(sokol-noentry.m)
    else()
        fips_files(sokol-noentry.c)
    endif()
    sokol_system_deps()
    if (FIPS_MSVC)
        target_compile_options(sokol-noentry PRIVATE /W4)
    endif()
fips_end_lib()
endif()

# the sokol implementations library as DLL
# FIXME: implement this also for other platforms
if (FIPS_WINDOWS OR FIPS_MACOS OR FIPS_LINUX)
    fips_begin_sharedlib(sokol-dll)
        fips_files(sokol-dll.c)
        sokol_system_deps()
        if (FIPS_MSVC)
            target_compile_options(sokol-dll PRIVATE /W4)
        endif()
        if (FIPS_OSX)
            target_compile_options("sokol-dll" PRIVATE -x objective-c)
        endif()
    fips_end_sharedlib()
endif()
